---
title: "Homework 1"
author: "Devin Koehl"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_float: true
    theme: united
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  fig.width = 12,
  fig.height = 8
  )
```

# Instructions

Complete the problems below. Use the 'finish_here.html' file to see what your finished markdown document should look like.

# Prepping the data

- We will be using a curated version of the `gapminder` dataset.

- For more on the Gapminder organization, see <https://www.gapminder.org/about-gapminder/>.

- I like to prep a dataset for graphics before I make plots. Normally, I name the data `ggdata`. You are welcome to use this naming convention. 

```{r, echo=TRUE}

# Load libraries
suppressPackageStartupMessages({
  # for homework problems
  library(gapminder)
  library(tidyverse)
  library(ggrepel)
  # for optional problem
  library(gganimate)
  library(gifski)
})

ggdata <- gapminder %>%
  # keep only rows where year is 2007
  filter(year == 2007) %>%
  # the label column needs to be computed for each continent, separately.
  # therefore, we group the data by continent before creating the label
  # column. This column will be used in the last few problems.
  group_by(continent) %>%
  mutate(# income is highly skewed, so it's easier to look at on the log scale
    log_income = log(gdpPercap),
    # this comes into play later
    label = case_when(lifeExp %in% c(min(lifeExp), max(lifeExp)) ~ country))

```


# Problem 1

Using `ggdata`, create the following plot (you can use different theme elements such as a grey background or text size). 

Notes: 

- The x-axis and y-axis labels indicate which columns in `ggdata` were used to make the data.

- you will want to use `geom_point(shape = 21)` to set the fill of points later in the assignment.

```{r}
#Map the data - x axis will be gdpPercap and y will be lifeExp.
plot = ggplot(data = ggdata) + geom_point(
  mapping = aes(x = gdpPercap, y = lifeExp),
  shape = 21,
  size = 2
)

#Change background to black and white- http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
plot + theme_bw()

```  

# Problem 2

Make some adjustments: 

1. Use `log_income` instead of `gdpPercap` as the x variable

2. make the countries (i.e., points) have fills that correspond to the continent that the country belongs to.

3. make the size of points proportional to the population of the country.

```{r}
plot = ggplot(data = ggdata) +
  
  #Change to log_income on the x axis and fill with continent
  geom_point(
    mapping = aes(
      size = pop,
      x = log_income,
      y = lifeExp,
      color = continent,
      fill = continent
    ),
    shape = 21,
    color = "black"
  ) +
  
  #Set the x-axis
  xlim(6, 11) +
  
  #Set the y-axis
  ylim(30, 85)

#Plot and black and white theme
plot + theme_bw() 
```

# Problem 3

Make a few more adjustments: 

1. Set the limits of the x-axis between 6 and 11 (*i.e.*, `xlim = c(6, 11)`)

2. Set the limits of the y-axis between 30 and 85 (*i.e.*, `xlim = c(30, 85)`)

3. Add an annotation layer in the center of the plot indicating the year

4. Clean up the labels

*Note* There are multiple ways to get 3. done. You can use `annotate` or `geom_text`. I think it's easier to use annotate. You might also want to use `xlim`, `ylim` and the `mean` function to help position your label in the exact center of the plot.

```{r}
plot = ggplot(data = ggdata) +
  
  geom_point(
    mapping = aes(
      size = pop,
      x = log_income,
      y = lifeExp,
      color = continent,
      fill = continent
    ),
    shape = 21,
    color = "black"
  ) +
  
  #Set the x and y axis
  xlim(6, 11) + ylim(30, 85)

#Plot with black and white theme
plot + theme_bw() +
  
  #Use the annotate function to add text to the plot, use alpha to control the transparency
  annotate(
    geom = "text",
    x = 8.5,
    y = 60,
    size = 80,
    colour = "grey",
    label = "2007",
    alpha = 0.2,
    hjust = 0.5
  ) +
  
  #Use the labs function to change the labels on the legend
  labs(x = "Income (log GDP per capita)",
       y = "Life expectancy at birth, years",
       size = "Population (millions)",
       fill = "Continent") +
  
  #The guide function can help control the order of the legend
  guides(size = guide_legend(order = 1), fill = guide_legend(order = 2))

```

# Problem 4

Make a couple more adjustments to your plot:

1. Set the range of point sizes as `c(1,20)` (hint: look up `scale_size`)

2. Remove the point size guideline from the legend.

3. Increase the size of points in the fill portion of the legend. (hint: look up `guides`)


```{r}
plot = ggplot(data = ggdata) +
  geom_point(
    mapping = aes(
      size = pop,
      x = log_income,
      y = lifeExp,
      color = continent,
      fill = continent
    ),
    pch = 21,
    color = "black"
  ) +
  xlim(6, 11) +
  ylim(30, 85)

plot + theme_bw() +
  annotate(
    geom = "text",
    x = 8.5,
    y = 60,
    size = 80,
    colour = "grey",
    label = "2007",
    alpha = 0.2,
    hjust = 0.5
  ) + labs(x = "Income (log GDP per capita)",
           y = "Life expectancy at birth, years",
           size = "Population (millions)",
           fill = "Continent") + scale_size(range = c(1, 20), guide = FALSE) + guides(fill = guide_legend(override.aes = list(size =
                                                                                                                                15)))
```

# Problem 5

Try arranging `ggdata` by population size, in descending order, prior to plotting. 

- Do you notice anything different about the plot? 

- Explain why there is or isn't a difference in the plot. 


```{r warning=FALSE}

ggdata <- gapminder %>%
  # keep only rows where year is 2007
  filter(year == 2007) %>%
  # the label column needs to be computed for each continent, separately.
  # therefore, we group the data by continent before creating the label
  # column. This column will be used in the last few problems.
  #Arrange by descending population
  arrange(desc(pop))  %>%
  mutate(# income is highly skewed, so it's easier to look at on the log scale
    log_income = log(gdpPercap),
    # this comes into play later
    label = case_when(lifeExp %in% c(min(lifeExp), max(lifeExp)) ~ country))

plot = ggplot(data = ggdata) + geom_point(
  mapping = aes(
    size = pop,
    x = log_income,
    y = lifeExp,
    color = continent,
    fill = continent
  ),
  shape = 21,
  color = "black"
) + xlim(6, 11) + ylim(30, 85)

plot + theme_bw() + annotate(
  geom = "text",
  x = 8.5,
  y = 60,
  size = 80,
  colour = "grey",
  label = "2007",
  alpha = 0.2,
  hjust = 0.5
) + labs(x = "Income (log GDP per capita)",
         y = "Life expectancy at birth, years",
         size = "Population (millions)",
         fill = "Continent")  + scale_size(range = c(1, 20), guide = FALSE) +
  guides(fill = guide_legend(override.aes = list(size = 15)))

```
The plot does not change and remains the same. This is because we are not altering the underlying data frame.

```{r}

###
# But there is a difference! Take a closer look at the figures in 
# problems 4 and 5. There are some points in the figure from problem 5 
# that are not visible in the figure from problem 5. 
###

```


# Problem 6
Add a `geom_label_repel` layer to the plot that indicates which country in each continent has the highest or lowest life expectancy. Use `show.legend=FALSE` to stop the text from being incorporated into the legend. Also, note that you can set size outside of the call to `aes()` in order to make all the labels the same size and not in proportion to population size. 

```{r warning=FALSE}
#Lequin in class helped me with this, create a dataset that has the information we need
#Originally I added a label but it labeled every point, I found out that I need to specify the exact parameters I need
low_high <- ggdata %>%
  group_by(continent) %>%
  mutate(low=min_rank(lifeExp), high=min_rank(desc(lifeExp))) %>%
  filter(low==1 | high==1) %>%
  select(country, continent, lifeExp, log_income, low, high)


ggdata <- gapminder %>% 
  # keep only rows where year is 2007
  filter(year == 2007) %>% 
  # the label column needs to be computed for each continent, separately.
  # therefore, we group the data by continent before creating the label
  # column. This column will be used in the last few problems.
  #Arrange by descending population
  arrange(desc(pop))  %>% 
  mutate(
    # income is highly skewed, so it's easier to look at on the log scale
    log_income = log(gdpPercap),
    # this comes into play later
    label = case_when(
      lifeExp %in% c(min(lifeExp), max(lifeExp)) ~ country
    )
  )

plot = ggplot(data = ggdata) +
  geom_point(
    mapping = aes(
      size = pop,
      x = log_income,
      y = lifeExp,
      color = continent,
      fill = continent
    ),
    shape = 21,
    color = "black"
  ) + xlim(6, 11) + ylim(30, 85)

plot + theme_bw() + annotate(
  geom = "text",
  x = 8.5,
  y = 60,
  size = 80,
  colour = "grey",
  label = "2007",
  alpha = 0.2,
  hjust = 0.5
) + labs(x = "Income (log GDP per capita)",
         y = "Life expectancy at birth, years",
         size = "Population (millions)",
         fill = "Continent")  + scale_size(range = (c(1, 20))) + guides(size = FALSE) + guides(fill = guide_legend(override.aes = list(size =
                                                                                                                                         15))) + geom_label_repel(
                                                                                                                                           data = low_high,
                                                                                                                                           aes(
                                                                                                                                             x = log_income,
                                                                                                                                             y = lifeExp,
                                                                                                                                             label = country,
                                                                                                                                             fill = continent
                                                                                                                                           ),
                                                                                                                                           color = 'black',
                                                                                                                                           size = 3.5,
                                                                                                                                           show.legend = FALSE
                                                                                                                                         )  

